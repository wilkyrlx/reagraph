{"version":3,"file":"useSelection-8cfedcce.js","sources":["../../src/utils/paths.ts","../../src/selection/useSelection.ts"],"sourcesContent":["import Graph from 'graphology';\nimport { bidirectional } from 'graphology-shortest-path';\n\nexport function findPath(graph: Graph, source: string, target: string) {\n  return bidirectional(graph, source, target);\n}\n","import React, {\n  RefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\nimport { GraphCanvasRef } from '../GraphCanvas';\nimport { useHotkeys } from 'reakeys';\nimport { GraphEdge, GraphNode } from '../types';\nimport { findPath } from '../utils/paths';\nimport { getAdjacents, PathSelectionTypes } from './utils';\n\nexport type HotkeyTypes = 'selectAll' | 'deselect' | 'delete';\n\nexport type SelectionTypes = 'single' | 'multi' | 'multiModifier';\n\nexport interface SelectionProps {\n  /**\n   * Required ref for the graph.\n   */\n  ref: RefObject<GraphCanvasRef | null>;\n\n  /**\n   * Current selections.\n   *\n   * Contains both nodes and edges ids.\n   */\n  selections?: string[];\n\n  /**\n   * Default active selections.\n   */\n  actives?: string[];\n\n  /**\n   * Node datas.\n   */\n  nodes?: GraphNode[];\n\n  /**\n   * Edge datas.\n   */\n  edges?: GraphEdge[];\n\n  /**\n   * Disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Hotkey types\n   */\n  hotkeys?: HotkeyTypes[];\n\n  /**\n   * Whether to focus on select or not.\n   */\n  focusOnSelect?: boolean | 'singleOnly';\n\n  /**\n   * Type of selection.\n   */\n  type?: SelectionTypes;\n\n  /**\n   * Type of selection.\n   */\n  pathSelectionType?: PathSelectionTypes;\n\n  /**\n   * Whether it should active on hover or not.\n   */\n  pathHoverType?: PathSelectionTypes;\n\n  /**\n   * On selection change.\n   */\n  onSelection?: (selectionIds: string[]) => void;\n}\n\nexport interface SelectionResult {\n  /**\n   * Selections id array (of nodes and edges).\n   */\n  selections: string[];\n\n  /**\n   * The nodes/edges around the selections to highlight.\n   */\n  actives: string[];\n\n  /**\n   * Clear selections method.\n   */\n  clearSelections: (value?: string[]) => void;\n\n  /**\n   * A selection method.\n   */\n  addSelection: (value: string) => void;\n\n  /**\n   * Get the paths between two nodes.\n   */\n  selectNodePaths: (source: string, target: string) => void;\n\n  /**\n   * Remove selection method.\n   */\n  removeSelection: (value: string) => void;\n\n  /**\n   * Toggle existing selection on/off method.\n   */\n  toggleSelection: (value: string) => void;\n\n  /**\n   * Set internal selections.\n   */\n  setSelections: (value: string[]) => void;\n\n  /**\n   * On click event pass through.\n   */\n  onNodeClick?: (data: GraphNode) => void;\n\n  /**\n   * On canvas click event pass through.\n   */\n  onCanvasClick?: (event: MouseEvent) => void;\n\n  /**\n   * When the lasso happened.\n   */\n  onLasso?: (selections: string[]) => void;\n\n  /**\n   * When the lasso ended.\n   */\n  onLassoEnd?: (selections: string[]) => void;\n\n  /**\n   * When node got a pointer over.\n   */\n  onNodePointerOver?: (node: GraphNode) => void;\n\n  /**\n   * When node lost pointer over.\n   */\n  onNodePointerOut?: (node: GraphNode) => void;\n}\n\nexport const useSelection = ({\n  selections = [],\n  nodes = [],\n  actives = [],\n  focusOnSelect = true,\n  type = 'single',\n  pathHoverType = 'out',\n  pathSelectionType = 'direct',\n  ref,\n  hotkeys = ['selectAll', 'deselect', 'delete'],\n  disabled,\n  onSelection\n}: SelectionProps): SelectionResult => {\n  const [internalHovers, setInternalHovers] = useState<string[]>([]);\n  const [internalActives, setInternalActives] = useState<string[]>(actives);\n  const [internalSelections, setInternalSelections] =\n    useState<string[]>(selections);\n  const [metaKeyDown, setMetaKeyDown] = useState<boolean>(false);\n  const isMulti = type === 'multi' || type === 'multiModifier';\n\n  const addSelection = useCallback(\n    (items: string | string[]) => {\n      if (!disabled && items) {\n        items = Array.isArray(items) ? items : [items];\n\n        const filtered = items.filter(\n          item => !internalSelections.includes(item)\n        );\n        if (filtered.length) {\n          const next = [...internalSelections, ...filtered];\n          onSelection?.(next);\n          setInternalSelections(next);\n        }\n      }\n    },\n    [disabled, internalSelections, onSelection]\n  );\n\n  const removeSelection = useCallback(\n    (items: string | string[]) => {\n      if (!disabled && items) {\n        items = Array.isArray(items) ? items : [items];\n\n        const next = internalSelections.filter(i => !items.includes(i));\n        onSelection?.(next);\n        setInternalSelections(next);\n      }\n    },\n    [disabled, internalSelections, onSelection]\n  );\n\n  const clearSelections = useCallback(\n    (next: string | string[] = []) => {\n      if (!disabled) {\n        next = Array.isArray(next) ? next : [next];\n        setInternalActives([]);\n        setInternalSelections(next);\n        onSelection?.(next);\n      }\n    },\n    [disabled, onSelection]\n  );\n\n  const toggleSelection = useCallback(\n    (item: string) => {\n      const has = internalSelections.includes(item);\n      if (has) {\n        removeSelection(item);\n      } else {\n        if (!isMulti) {\n          clearSelections(item);\n        } else {\n          addSelection(item);\n        }\n      }\n    },\n    [\n      addSelection,\n      clearSelections,\n      internalSelections,\n      isMulti,\n      removeSelection\n    ]\n  );\n\n  const onNodeClick = useCallback(\n    (data: GraphNode) => {\n      if (isMulti) {\n        if (type === 'multiModifier') {\n          if (metaKeyDown) {\n            addSelection(data.id);\n          } else {\n            clearSelections(data.id);\n          }\n        } else {\n          addSelection(data.id);\n        }\n      } else {\n        clearSelections(data.id);\n      }\n\n      if (\n        focusOnSelect === true ||\n        (focusOnSelect === 'singleOnly' && !metaKeyDown)\n      ) {\n        if (!ref.current) {\n          throw new Error('No ref found for the graph canvas.');\n        }\n\n        const graph = ref.current.getGraph();\n        const { nodes: adjacents } = getAdjacents(\n          graph,\n          [data.id],\n          pathSelectionType\n        );\n        ref.current?.centerGraph([data.id, ...adjacents]);\n      }\n    },\n    [\n      addSelection,\n      clearSelections,\n      focusOnSelect,\n      isMulti,\n      metaKeyDown,\n      pathSelectionType,\n      ref,\n      type\n    ]\n  );\n\n  const selectNodePaths = useCallback(\n    (source: string, target: string) => {\n      const graph = ref.current.getGraph();\n      if (!graph) {\n        throw new Error('Graph is not initialized');\n      }\n\n      const path = findPath(graph, source, target);\n      clearSelections([source, target]);\n\n      const result = [];\n      for (let i = 0; i < path.length - 1; i++) {\n        const from = path[i];\n        const to = path[i + 1];\n        const edge = graph.getEdgeAttributes(from, to);\n        if (edge) {\n          result.push(edge.id);\n        }\n      }\n\n      setInternalActives([...path.map(p => p as string), ...result]);\n    },\n    [clearSelections, ref]\n  );\n\n  const onKeyDown = useCallback((event: KeyboardEvent) => {\n    const element = event.target as any;\n    const isSafe =\n      element.tagName !== 'INPUT' &&\n      element.tagName !== 'SELECT' &&\n      element.tagName !== 'TEXTAREA' &&\n      !element.isContentEditable;\n\n    const isMeta = event.metaKey || event.ctrlKey;\n\n    if (isSafe && isMeta) {\n      event.preventDefault();\n      setMetaKeyDown(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', onKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, [onKeyDown]);\n\n  const onCanvasClick = useCallback(\n    (event: MouseEvent) => {\n      if (\n        event.button !== 2 &&\n        (internalSelections.length || internalActives.length)\n      ) {\n        clearSelections();\n        setMetaKeyDown(false);\n\n        // Only re-center if we have a single selection\n        if (focusOnSelect && internalSelections.length === 1) {\n          if (!ref.current) {\n            throw new Error('No ref found for the graph canvas.');\n          }\n\n          ref.current?.centerGraph();\n        }\n      }\n    },\n    [\n      clearSelections,\n      focusOnSelect,\n      internalActives.length,\n      internalSelections.length,\n      ref\n    ]\n  );\n\n  const onLasso = useCallback((selections: string[]) => {\n    setInternalActives(selections);\n  }, []);\n\n  const onLassoEnd = useCallback(\n    (selections: string[]) => {\n      clearSelections(selections);\n    },\n    [clearSelections]\n  );\n\n  const onNodePointerOver = useCallback(\n    (data: GraphNode) => {\n      if (pathHoverType) {\n        const graph = ref.current.getGraph();\n        if (!graph) {\n          throw new Error('No ref found for the graph canvas.');\n        }\n\n        const { nodes, edges } = getAdjacents(graph, [data.id], pathHoverType);\n        setInternalHovers([...nodes, ...edges]);\n      }\n    },\n    [pathHoverType, ref]\n  );\n\n  const onNodePointerOut = useCallback(() => {\n    if (pathHoverType) {\n      setInternalHovers([]);\n    }\n  }, [pathHoverType]);\n\n  useEffect(() => {\n    if (pathSelectionType !== 'direct' && internalSelections.length > 0) {\n      const graph = ref.current?.getGraph();\n      if (graph) {\n        const { nodes, edges } = getAdjacents(\n          graph,\n          internalSelections,\n          pathSelectionType\n        );\n        setInternalActives([...nodes, ...edges]);\n      }\n    }\n  }, [internalSelections, pathSelectionType, ref]);\n\n  useHotkeys([\n    {\n      name: 'Select All',\n      keys: 'mod+a',\n      disabled: !hotkeys.includes('selectAll'),\n      category: 'Graph',\n      description: 'Select all nodes and edges',\n      callback: event => {\n        event.preventDefault();\n\n        if (!disabled && type !== 'single') {\n          const next = nodes.map(n => n.id);\n          onSelection?.(next);\n          setInternalSelections(next);\n        }\n      }\n    },\n    {\n      name: 'Deselect Selections',\n      category: 'Graph',\n      disabled: !hotkeys.includes('deselect'),\n      description: 'Deselect selected nodes and edges',\n      keys: 'escape',\n      callback: event => {\n        if (!disabled) {\n          event.preventDefault();\n          onSelection?.([]);\n          setInternalSelections([]);\n        }\n      }\n    }\n  ]);\n\n  const joinedActives = useMemo(\n    () => [...internalActives, ...internalHovers],\n    [internalActives, internalHovers]\n  );\n\n  return {\n    actives: joinedActives,\n    onNodeClick,\n    onNodePointerOver,\n    onNodePointerOut,\n    onLasso,\n    onLassoEnd,\n    selectNodePaths,\n    onCanvasClick,\n    selections: internalSelections,\n    clearSelections,\n    addSelection,\n    removeSelection,\n    toggleSelection,\n    setSelections: setInternalSelections\n  };\n};\n"],"names":["findPath","graph","source","target","bidirectional","useSelection","selections","nodes","actives","focusOnSelect","type","pathHoverType","pathSelectionType","ref","hotkeys","disabled","onSelection","internalHovers","setInternalHovers","useState","internalActives","setInternalActives","internalSelections","setInternalSelections","metaKeyDown","setMetaKeyDown","isMulti","addSelection","useCallback","items","filtered","item","next","removeSelection","i","clearSelections","toggleSelection","onNodeClick","data","adjacents","getAdjacents","_a","selectNodePaths","path","result","from","to","edge","p","onKeyDown","event","element","isSafe","isMeta","useEffect","onCanvasClick","onLasso","onLassoEnd","onNodePointerOver","edges","onNodePointerOut","useHotkeys","n","useMemo"],"mappings":"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"}